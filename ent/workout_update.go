// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MatiF100/Throw-Muffin-API/ent/predicate"
	"github.com/MatiF100/Throw-Muffin-API/ent/workout"
)

// WorkoutUpdate is the builder for updating Workout entities.
type WorkoutUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutMutation
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wu *WorkoutUpdate) Where(ps ...predicate.Workout) *WorkoutUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "Name" field.
func (wu *WorkoutUpdate) SetName(s string) *WorkoutUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableName(s *string) *WorkoutUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetIntensity sets the "Intensity" field.
func (wu *WorkoutUpdate) SetIntensity(i int) *WorkoutUpdate {
	wu.mutation.ResetIntensity()
	wu.mutation.SetIntensity(i)
	return wu
}

// SetNillableIntensity sets the "Intensity" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableIntensity(i *int) *WorkoutUpdate {
	if i != nil {
		wu.SetIntensity(*i)
	}
	return wu
}

// AddIntensity adds i to the "Intensity" field.
func (wu *WorkoutUpdate) AddIntensity(i int) *WorkoutUpdate {
	wu.mutation.AddIntensity(i)
	return wu
}

// Mutation returns the WorkoutMutation object of the builder.
func (wu *WorkoutUpdate) Mutation() *WorkoutMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkoutUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkoutUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkoutUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkoutUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkoutUpdate) check() error {
	if v, ok := wu.mutation.Intensity(); ok {
		if err := workout.IntensityValidator(v); err != nil {
			return &ValidationError{Name: "Intensity", err: fmt.Errorf(`ent: validator failed for field "Workout.Intensity": %w`, err)}
		}
	}
	return nil
}

func (wu *WorkoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Intensity(); ok {
		_spec.SetField(workout.FieldIntensity, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedIntensity(); ok {
		_spec.AddField(workout.FieldIntensity, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkoutUpdateOne is the builder for updating a single Workout entity.
type WorkoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutMutation
}

// SetName sets the "Name" field.
func (wuo *WorkoutUpdateOne) SetName(s string) *WorkoutUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableName(s *string) *WorkoutUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetIntensity sets the "Intensity" field.
func (wuo *WorkoutUpdateOne) SetIntensity(i int) *WorkoutUpdateOne {
	wuo.mutation.ResetIntensity()
	wuo.mutation.SetIntensity(i)
	return wuo
}

// SetNillableIntensity sets the "Intensity" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableIntensity(i *int) *WorkoutUpdateOne {
	if i != nil {
		wuo.SetIntensity(*i)
	}
	return wuo
}

// AddIntensity adds i to the "Intensity" field.
func (wuo *WorkoutUpdateOne) AddIntensity(i int) *WorkoutUpdateOne {
	wuo.mutation.AddIntensity(i)
	return wuo
}

// Mutation returns the WorkoutMutation object of the builder.
func (wuo *WorkoutUpdateOne) Mutation() *WorkoutMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wuo *WorkoutUpdateOne) Where(ps ...predicate.Workout) *WorkoutUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkoutUpdateOne) Select(field string, fields ...string) *WorkoutUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workout entity.
func (wuo *WorkoutUpdateOne) Save(ctx context.Context) (*Workout, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) SaveX(ctx context.Context) *Workout {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkoutUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkoutUpdateOne) check() error {
	if v, ok := wuo.mutation.Intensity(); ok {
		if err := workout.IntensityValidator(v); err != nil {
			return &ValidationError{Name: "Intensity", err: fmt.Errorf(`ent: validator failed for field "Workout.Intensity": %w`, err)}
		}
	}
	return nil
}

func (wuo *WorkoutUpdateOne) sqlSave(ctx context.Context) (_node *Workout, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workout.FieldID)
		for _, f := range fields {
			if !workout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Intensity(); ok {
		_spec.SetField(workout.FieldIntensity, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedIntensity(); ok {
		_spec.AddField(workout.FieldIntensity, field.TypeInt, value)
	}
	_node = &Workout{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
