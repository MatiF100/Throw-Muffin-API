// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MatiF100/Throw-Muffin-API/ent/workout"
)

// WorkoutCreate is the builder for creating a Workout entity.
type WorkoutCreate struct {
	config
	mutation *WorkoutMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (wc *WorkoutCreate) SetName(s string) *WorkoutCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetIntensity sets the "Intensity" field.
func (wc *WorkoutCreate) SetIntensity(i int) *WorkoutCreate {
	wc.mutation.SetIntensity(i)
	return wc
}

// SetNillableIntensity sets the "Intensity" field if the given value is not nil.
func (wc *WorkoutCreate) SetNillableIntensity(i *int) *WorkoutCreate {
	if i != nil {
		wc.SetIntensity(*i)
	}
	return wc
}

// Mutation returns the WorkoutMutation object of the builder.
func (wc *WorkoutCreate) Mutation() *WorkoutMutation {
	return wc.mutation
}

// Save creates the Workout in the database.
func (wc *WorkoutCreate) Save(ctx context.Context) (*Workout, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkoutCreate) SaveX(ctx context.Context) *Workout {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkoutCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkoutCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkoutCreate) defaults() {
	if _, ok := wc.mutation.Intensity(); !ok {
		v := workout.DefaultIntensity
		wc.mutation.SetIntensity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkoutCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Workout.Name"`)}
	}
	if _, ok := wc.mutation.Intensity(); !ok {
		return &ValidationError{Name: "Intensity", err: errors.New(`ent: missing required field "Workout.Intensity"`)}
	}
	if v, ok := wc.mutation.Intensity(); ok {
		if err := workout.IntensityValidator(v); err != nil {
			return &ValidationError{Name: "Intensity", err: fmt.Errorf(`ent: validator failed for field "Workout.Intensity": %w`, err)}
		}
	}
	return nil
}

func (wc *WorkoutCreate) sqlSave(ctx context.Context) (*Workout, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkoutCreate) createSpec() (*Workout, *sqlgraph.CreateSpec) {
	var (
		_node = &Workout{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workout.Table, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Intensity(); ok {
		_spec.SetField(workout.FieldIntensity, field.TypeInt, value)
		_node.Intensity = value
	}
	return _node, _spec
}

// WorkoutCreateBulk is the builder for creating many Workout entities in bulk.
type WorkoutCreateBulk struct {
	config
	err      error
	builders []*WorkoutCreate
}

// Save creates the Workout entities in the database.
func (wcb *WorkoutCreateBulk) Save(ctx context.Context) ([]*Workout, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workout, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkoutCreateBulk) SaveX(ctx context.Context) []*Workout {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkoutCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkoutCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
